using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Text;

using Google.Protobuf.Reflection;

namespace ProtoBuf.Reflection
{
    /// <summary>
    /// A code generator that writes C#
    /// </summary>
    public class CSharpCodeGenerator : CommonCodeGenerator
    {
        /// <summary>
        /// Reusable code-generator instance
        /// </summary>
        public static CSharpCodeGenerator Default { get; } = new CSharpCodeGenerator();
        /// <summary>
        /// Create a new CSharpCodeGenerator instance
        /// </summary>
        protected CSharpCodeGenerator() { }
        /// <summary>
        /// Returns the language name
        /// </summary>
        public override string Name => "C#";
        /// <summary>
        /// Returns the default file extension
        /// </summary>
        protected override string DefaultFileExtension => "cs";
        /// <summary>
        /// Escapes language keywords
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE0066:Convert switch statement to expression", Justification = "Readability")]
        protected override string Escape(string identifier)
        {
            switch (identifier)
            {
                case "abstract":
                case "event":
                case "new":
                case "struct":
                case "as":
                case "explicit":
                case "null":
                case "switch":
                case "base":
                case "extern":
                case "object":
                case "this":
                case "bool":
                case "false":
                case "operator":
                case "throw":
                case "break":
                case "finally":
                case "out":
                case "true":
                case "byte":
                case "fixed":
                case "override":
                case "try":
                case "case":
                case "float":
                case "params":
                case "typeof":
                case "catch":
                case "for":
                case "private":
                case "uint":
                case "char":
                case "foreach":
                case "protected":
                case "ulong":
                case "checked":
                case "goto":
                case "public":
                case "unchecked":
                case "class":
                case "if":
                case "readonly":
                case "unsafe":
                case "const":
                case "implicit":
                case "ref":
                case "ushort":
                case "continue":
                case "in":
                case "return":
                case "using":
                case "decimal":
                case "int":
                case "sbyte":
                case "virtual":
                case "default":
                case "interface":
                case "sealed":
                case "volatile":
                case "delegate":
                case "internal":
                case "short":
                case "void":
                case "do":
                case "is":
                case "sizeof":
                case "while":
                case "double":
                case "lock":
                case "stackalloc":
                case "else":
                case "long":
                case "static":
                case "enum":
                case "namespace":
                case "string":
                    return "@" + identifier;
                default:
                    return identifier;
            }
        }

        /// <summary>
        /// Get the language version for this language from a schema
        /// </summary>
        protected override string GetLanguageVersion(FileDescriptorProto obj)
            => obj?.Options?.GetOptions()?.CSharpLanguageVersion;

        private const string AdditionalSuppressionCodes = ", IDE0079, IDE1006, RCS1036, RCS1057, RCS1085, RCS1192";

        /// <summary>
        /// Start a file
        /// </summary>
        protected override void WriteFileHeader(GeneratorContext ctx, FileDescriptorProto file, ref object state)
        {
            var prefix = ctx.Supports(CSharp6) ? "CS" : "";
            var tw = ctx.WriteLine("// <auto-generated>")
               .WriteLine("//   This file was generated by a tool; you should avoid making direct changes.")
               .WriteLine("//   Consider using 'partial classes' to extend these types")
               .WriteLine($"//   Input: {Path.GetFileName(ctx.File.Name)}")
               .WriteLine("// </auto-generated>")
               .WriteLine()
               .WriteLine("#region Designer generated code")
               .Write($"#pragma warning disable {prefix}0612, {prefix}0618, {prefix}1591, {prefix}3021");
            if (ctx.Supports(CSharp6))
            {
                tw.Write(AdditionalSuppressionCodes);
            }
            tw.WriteLine();
            if (ctx.Usings)
            {
                tw.WriteLine("using System;");
                tw.WriteLine("using System.Collections.Generic;");
                tw.WriteLine("using System.ComponentModel;");
                if (ctx.EmitServicesFor(ServiceKinds.Wcf))
                    ctx.WriteLine("using System.ServiceModel;");
                if (ctx.EmitServices)
                    tw.WriteLine("using System.Threading.Tasks;");
                tw.WriteLine();
                tw.WriteLine("using ProtoBuf;");
                if (ctx.EmitServices)
                    tw.WriteLine("using ProtoBuf.Gprc;");
                tw.WriteLine();
                if (ctx.EmitServicesFor(ServiceKinds.Grpc))
                    ctx.WriteLine("using ProtoBuf.Grpc.Configuration;");
            }
        }

        private static string Qualify<T>(GeneratorContext ctx)
            => Qualify(typeof(T), ctx);

        private static string Qualify(Type type, GeneratorContext ctx)
            => Qualify(type.Namespace, TypeName(type), ctx);

        private static string TypeName(Type type)
            => !typeof(Attribute).IsAssignableFrom(type) ? type.Name
               : type.Name.Substring(0, type.Name.Length - nameof(Attribute).Length);

        private static string Qualify(string @namespace, string name, GeneratorContext ctx)
            => ctx.Usings ? name : $"global::{@namespace}.{name}";

        private static string NameIfDifferent(INamed proto, string name, string prefix = "(", string suffix = ")")
            => name == proto.Name ? string.Empty
               : $@"{prefix}Name = {(proto.Name.Contains("\\") ? "@" : "")}""{proto.Name}""{suffix}";

        /// <inheritdoc/>
        protected override void WriteNamespaceHeader(GeneratorContext ctx, string @namespace)
        {
            ctx.WriteLine($"namespace {@namespace}");
            ctx.WriteLine("{").Indent().WriteLine();
        }

        /// <inheritdoc/>
        protected override void WriteNamespaceFooter(GeneratorContext ctx, string @namespace)
        {
            ctx.Outdent().WriteLine("}").WriteLine();
        }

        /// <summary>
        /// End a file
        /// </summary>
        protected override void WriteFileFooter(GeneratorContext ctx, FileDescriptorProto file, ref object state)
        {
            var prefix = ctx.Supports(CSharp6) ? "CS" : "";
            var tw = ctx.Write($"#pragma warning restore {prefix}0612, {prefix}0618, {prefix}1591, {prefix}3021");
            if (ctx.Supports(CSharp6))
            {
                tw.Write(AdditionalSuppressionCodes);
            }
            tw.WriteLine();
            tw.WriteLine("#endregion");
        }
        /// <summary>
        /// Start an enum
        /// </summary>
        protected override void WriteEnumHeader(GeneratorContext ctx, EnumDescriptorProto @enum, ref object state)
        {
            ctx.WriteLine();
            var name = ctx.NameNormalizer.GetName(@enum);
            ctx.WriteLine($"[{Qualify<ProtoContractAttribute>(ctx)}{NameIfDifferent(@enum, name)}]");
            WriteOptions(ctx, @enum.Options);
            ctx.WriteLine($"{GetAccess(GetAccess(@enum))} enum {Escape(name)}").WriteLine("{").Indent();
        }

        /// <summary>
        /// End an enum
        /// </summary>
        protected override void WriteEnumFooter(GeneratorContext ctx, EnumDescriptorProto @enum, ref object state)
        {
            ctx.Outdent().WriteLine("}");
        }
        /// <summary>
        /// Write an enum value
        /// </summary>
        protected override void WriteEnumValue(GeneratorContext ctx, EnumValueDescriptorProto @enum, ref object state)
        {
            var name = ctx.NameNormalizer.GetName(@enum);
            if (name != @enum.Name)
                ctx.Write($"[{Qualify<ProtoEnumAttribute>(ctx)}{NameIfDifferent(@enum, name)}]");

            WriteOptions(ctx, @enum.Options);
            ctx.WriteLine($"{Escape(name)} = {@enum.Number},");
        }

        /// <summary>
        /// End a message
        /// </summary>
        protected override void WriteMessageFooter(GeneratorContext ctx, DescriptorProto message, ref object state)
        {
            ctx.Outdent().WriteLine("}");
        }
        /// <summary>
        /// Start a message
        /// </summary>
        protected override void WriteMessageHeader(GeneratorContext ctx, DescriptorProto message, ref object state)
        {
            ctx.WriteLine();
            var name = ctx.NameNormalizer.GetName(message);
            ctx.WriteLine($"[{Qualify<ProtoContractAttribute>(ctx)}{NameIfDifferent(message, name)}]");
            WriteOptions(ctx, message.Options);
            var tw = ctx.Write($"{GetAccess(GetAccess(message))} partial class {Escape(name)}");
            if (ctx.Extensible)
                tw.Write($" : {Qualify<IExtensible>(ctx)}");
            tw.WriteLine();
            ctx.WriteLine("{").Indent();
            if (message.Options?.MessageSetWireFormat == true)
            {
                ctx.WriteLine("#error message_set_wire_format is not currently implemented").WriteLine();
            }
            if (ctx.Extensible)
            {
                string iExtension = Qualify<IExtension>(ctx);
                ctx.WriteLine($"private {iExtension} {FieldPrefix}extensionData;")
                   .WriteLine($"{iExtension} {Qualify<IExtensible>(ctx)}.GetExtensionObject(bool createIfMissing)");

                string extensible = Qualify<Extensible>(ctx);
                if (ctx.Supports(CSharp6))
                {
                    ctx.Indent().WriteLine($"=> {extensible}.GetExtensionObject(ref {FieldPrefix}extensionData, createIfMissing);")
                       .Outdent();
                }
                else
                {
                    ctx.WriteLine("{")
                       .Indent().WriteLine($"return {extensible}.GetExtensionObject(ref {FieldPrefix}extensionData, createIfMissing);")
                       .Outdent().WriteLine("}");
                }
            }
        }

        private static void WriteOptions<T>(GeneratorContext ctx, T obj) where T : class, ISchemaOptions
        {
            if (obj == null) return;
            if (obj.Deprecated)
            {
                ctx.WriteLine($"[{Qualify<ObsoleteAttribute>(ctx)}]");
            }
        }

        private const string FieldPrefix = "__pbn__";

        /// <summary>
        /// Get the language specific keyword representing an access level
        /// </summary>
        public override string GetAccess(Access access)
        {
            return access switch
            {
                Access.Internal => "internal",
                Access.Public => "public",
                Access.Private => "private",
                _ => base.GetAccess(access),
            };
        }

        /// <summary>
        /// Emit code beginning a constructor, if one is required
        /// </summary>
        /// <returns>true if a constructor is required</returns>
        protected override bool WriteContructorHeader(GeneratorContext ctx, DescriptorProto message, ref object state)
        {
            if (ctx.Supports(CSharp6)) return false;

            var name = ctx.NameNormalizer.GetName(message);
            ctx.WriteLine().WriteLine($"public {Escape(name)}()") // note: the .ctor is still public even if the type is internal; it is protected by the scope
                .WriteLine("{").Indent();
            return true;
        }

        /// <summary>
        /// Emit code terminating a constructor, if one is required
        /// </summary>
        protected override void WriteConstructorFooter(GeneratorContext ctx, DescriptorProto message, ref object state)
        {
            if (ctx.Supports(CSharp3))
            {
                ctx.WriteLine("OnConstructor();");
            }
            ctx.Outdent().WriteLine("}");

            if (ctx.Supports(CSharp3))
            {
                ctx.WriteLine().WriteLine("partial void OnConstructor();");
            }
        }

        /// <summary>
        /// Emit code initializing field values inside a constructor, if one is required
        /// </summary>
        protected override void WriteInitField(GeneratorContext ctx, FieldDescriptorProto field, ref object state, OneOfStub[] oneOfs)
        {
            var name = ctx.NameNormalizer.GetName(field);
            bool isOptional = field.label == FieldDescriptorProto.Label.LabelOptional;
            bool isRepeated = field.label == FieldDescriptorProto.Label.LabelRepeated;
            var typeName = GetTypeName(ctx, field, out var dataFormat, out var isMap);
            bool trackPresence = TrackFieldPresence(ctx, field, oneOfs, out _);

            string defaultValue = GetDefaultValue(ctx, field, typeName);

            if (isRepeated)
            {
                var mapMsgType = isMap ? ctx.TryFind<DescriptorProto>(field.TypeName) : null;
                if (mapMsgType != null)
                {
                    var keyTypeName = GetTypeName(ctx, mapMsgType.Fields.Single(x => x.Number == 1),
                        out var keyDataFormat, out var _);
                    var valueTypeName = GetTypeName(ctx, mapMsgType.Fields.Single(x => x.Number == 2),
                        out var valueDataFormat, out var _);
                    ctx.WriteLine($"{Escape(name)} = new {Qualify(typeof(Dictionary<,>), ctx)}<{keyTypeName}, {valueTypeName}>();");
                }
                else if (!UseArray(field))
                {
                    ctx.WriteLine($"{Escape(name)} = new {Qualify(typeof(List<>), ctx)}<{typeName}>();");
                }
            }
            else if (!trackPresence)
            {
                if (!string.IsNullOrWhiteSpace(defaultValue))
                {
                    ctx.WriteLine($"{Escape(name)} = {defaultValue};");
                }
            }
        }

        private string GetDefaultValue(GeneratorContext ctx, FieldDescriptorProto obj, string typeName)
        {
            string defaultValue = null;
            bool isOptional = obj.label == FieldDescriptorProto.Label.LabelOptional;

            if (isOptional || ctx.EmitRequiredDefaults || obj.type == FieldDescriptorProto.Type.TypeEnum)
            {
                defaultValue = obj.DefaultValue;

                if (obj.type == FieldDescriptorProto.Type.TypeString)
                {
                    defaultValue = string.IsNullOrEmpty(defaultValue) ? "\"\""
                        : ("@\"" + (defaultValue ?? "").Replace("\"", "\"\"") + "\"");
                }
                else if (obj.type == FieldDescriptorProto.Type.TypeDouble)
                {
                    switch (defaultValue)
                    {
                        case "inf": defaultValue = "double.PositiveInfinity"; break;
                        case "-inf": defaultValue = "double.NegativeInfinity"; break;
                        case "nan": defaultValue = "double.NaN"; break;
                    }
                }
                else if (obj.type == FieldDescriptorProto.Type.TypeFloat)
                {
                    switch (defaultValue)
                    {
                        case "inf": defaultValue = "float.PositiveInfinity"; break;
                        case "-inf": defaultValue = "float.NegativeInfinity"; break;
                        case "nan": defaultValue = "float.NaN"; break;
                    }
                }
                else if (obj.type == FieldDescriptorProto.Type.TypeEnum)
                {
                    var enumType = ctx.TryFind<EnumDescriptorProto>(obj.TypeName);
                    if (enumType != null)
                    {
                        EnumValueDescriptorProto found = null;
                        if (!string.IsNullOrEmpty(defaultValue))
                        {
                            found = enumType.Values.Find(x => x.Name == defaultValue);
                        }
                        else if (ctx.Syntax == FileDescriptorProto.SyntaxProto2)
                        {
                            // find the first one; if that is a zero, we don't need it after all
                            found = enumType.Values.FirstOrDefault();
                            if (found != null && found.Number == 0)
                            {
                                if (!isOptional) found = null; // we don't need it after all
                            }
                        }
                        // for proto3 the default is 0, so no need to do anything - GetValueOrDefault() will do it all

                        if (found != null)
                        {
                            defaultValue = ctx.NameNormalizer.GetName(found);
                        }
                        if (!string.IsNullOrWhiteSpace(defaultValue))
                        {
                            defaultValue = typeName + "." + defaultValue;
                        }
                    }
                }
            }

            return defaultValue;
        }
        /// <summary>
        /// Write a field
        /// </summary>
        protected override void WriteField(GeneratorContext ctx, FieldDescriptorProto field, ref object state, OneOfStub[] oneOfs)
        {
            ctx.WriteLine();
            var name = ctx.NameNormalizer.GetName(field);
            var tw = ctx.Write($"[{Qualify<ProtoMemberAttribute>(ctx)}({field.Number}{NameIfDifferent(field, name, ", ", "")}");
            var options = field.Options?.GetOptions();
            if (options?.AsReference == true)
            {
                tw.Write(", AsReference = true");
            }
            if (options?.DynamicType == true)
            {
                tw.Write(", DynamicType = true");
            }

            bool isOptional = field.label == FieldDescriptorProto.Label.LabelOptional;
            bool isRepeated = field.label == FieldDescriptorProto.Label.LabelRepeated;

            bool trackPresence = TrackFieldPresence(ctx, field, oneOfs, out var oneOf);

            bool suppressDefaultAttribute = !isOptional;
            var typeName = GetTypeName(ctx, field, out var dataFormat, out var isMap);
            string defaultValue = GetDefaultValue(ctx, field, typeName);

            if (!string.IsNullOrWhiteSpace(dataFormat))
            {
                tw.Write($", DataFormat = {Qualify<DataFormat>(ctx)}.{dataFormat}");
            }
            if (field.IsPackedField(ctx.Syntax))
            {
                tw.Write(", IsPacked = true");
            }
            if (field.label == FieldDescriptorProto.Label.LabelRequired)
            {
                tw.Write(", IsRequired = true");
            }
            tw.WriteLine(")]");
            if (!isRepeated && !string.IsNullOrWhiteSpace(defaultValue) && !suppressDefaultAttribute)
            {
                switch (field.type)
                {
                    case FieldDescriptorProto.Type.TypeFixed64:
                    case FieldDescriptorProto.Type.TypeUint64:
                        ctx.WriteLine($"[{Qualify<DefaultValueAttribute>(ctx)}(typeof(ulong), \"{defaultValue}\")]");
                        break;

                    default:
                        ctx.WriteLine($"[{Qualify<DefaultValueAttribute>(ctx)}({defaultValue})]");
                        break;
                }
            }
            WriteOptions(ctx, field.Options);
            string accessor = GetAccess(GetAccess(field));
            if (isRepeated)
            {
                var mapMsgType = isMap ? ctx.TryFind<DescriptorProto>(field.TypeName) : null;
                bool allowSet = ctx.EmitListSetters;
                if (mapMsgType != null)
                {
                    var keyTypeName = GetTypeName(ctx, mapMsgType.Fields.Single(x => x.Number == 1),
                        out var keyDataFormat, out var _);
                    var valueTypeName = GetTypeName(ctx, mapMsgType.Fields.Single(x => x.Number == 2),
                        out var valueDataFormat, out var _);

                    bool first = true;
                    tw = ctx.Write($"[{Qualify<ProtoMapAttribute>(ctx)}");
                    string dataFormatName = Qualify<DataFormat>(ctx);
                    if (!string.IsNullOrWhiteSpace(keyDataFormat))
                    {
                        tw.Write($"{(first ? "(" : ", ")}KeyFormat = {dataFormatName}.{keyDataFormat}");
                        first = false;
                    }
                    if (!string.IsNullOrWhiteSpace(valueDataFormat))
                    {
                        tw.Write($"{(first ? "(" : ", ")}ValueFormat = {dataFormatName}.{valueDataFormat}");
                        first = false;
                    }
                    tw.WriteLine(first ? "]" : ")]");
                    var dictionary = Qualify(typeof(Dictionary<,>), ctx);
                    if (ctx.Supports(CSharp6))
                    {
                        ctx.WriteLine($"{accessor} {dictionary}<{keyTypeName}, {valueTypeName}> {Escape(name)} {{ get; {(allowSet ? "set; " : "")}}} = new{(ctx.Supports(CSharp9) ? "" : $"{dictionary}<{keyTypeName}, {valueTypeName}>")}();");
                    }
                    else
                    {
                        ctx.WriteLine($"{accessor} {dictionary}<{keyTypeName}, {valueTypeName}> {Escape(name)} {{ get; {(allowSet ? "" : "private ")}set; }}");
                    }
                }
                else if (UseArray(field))
                {
                    ctx.WriteLine($"{accessor} {typeName}[] {Escape(name)} {{ get; set; }}");
                }
                else
                {
                    var list = Qualify(typeof(List<>), ctx);
                    if (ctx.Supports(CSharp6))
                    {
                        ctx.WriteLine($"{accessor} {list}<{typeName}> {Escape(name)} {{ get; {(allowSet ? "set; " : "")}}} = new{(ctx.Supports(CSharp9) ? "" : $" {list}<{typeName}>")}();");
                    }
                    else
                    {
                        ctx.WriteLine($"{accessor} {list}<{typeName}> {Escape(name)} {{ get; {(allowSet ? "" : "private ")}set; }}");
                    }
                }
            }
            else if (oneOf is object)
            {
                var defValue = string.IsNullOrWhiteSpace(defaultValue) ? (ctx.Supports(CSharp7_1) ? "default" : $"default({typeName})") : defaultValue;
                var fieldName = GetOneOfFieldName(oneOf.OneOf);
                var storage = oneOf.GetStorage(field.type, field.TypeName);
                ctx.WriteLine($"{accessor} {typeName} {Escape(name)}").WriteLine("{").Indent();

                switch (field.type)
                {
                    case FieldDescriptorProto.Type.TypeMessage:
                    case FieldDescriptorProto.Type.TypeGroup:
                    case FieldDescriptorProto.Type.TypeEnum:
                    case FieldDescriptorProto.Type.TypeBytes:
                    case FieldDescriptorProto.Type.TypeString:
                        ctx.WriteLine($"{PropGetPrefix()}{fieldName}.Is({field.Number}) ? (({typeName}){fieldName}.{storage}) : {defValue};{PropSuffix()}");
                        break;
                    default:
                        ctx.WriteLine($"{PropGetPrefix()}{fieldName}.Is({field.Number}) ? {fieldName}.{storage} : {defValue};{PropSuffix()}");
                        break;
                }
                var unionType = Qualify("ProtoBuf", oneOf.GetUnionType(), ctx);
                var cast = field.type == FieldDescriptorProto.Type.TypeEnum ? "(int)" : "";
                ctx.WriteLine($"{PropSetPrefix()}{fieldName} = new {unionType}({field.Number}, {cast}value);{PropSuffix()}")
                    .Outdent().WriteLine("}");

                if (ctx.Supports(CSharp6))
                {
                    ctx.WriteLine($"{accessor} bool ShouldSerialize{name}() => {fieldName}.Is({field.Number});")
                    .WriteLine($"{accessor} void Reset{name}() => {unionType}.Reset(ref {fieldName}, {field.Number});");
                }
                else
                {
                    ctx.WriteLine($"{accessor} bool ShouldSerialize{name}()").WriteLine("{").Indent()
                        .WriteLine($"return {fieldName}.Is({field.Number});").Outdent().WriteLine("}")
                        .WriteLine($"{accessor} void Reset{name}()").WriteLine("{").Indent()
                        .WriteLine($"{unionType}.Reset(ref {fieldName}, {field.Number});").Outdent().WriteLine("}");
                }

                if (oneOf.IsFirst())
                {
                    ctx.WriteLine().WriteLine($"private {unionType} {fieldName};");
                }
            }
            else if (trackPresence)
            {
                string fieldName = FieldPrefix + name, fieldType;
                bool isRef = false;
                switch (field.type)
                {
                    case FieldDescriptorProto.Type.TypeString:
                    case FieldDescriptorProto.Type.TypeBytes:
                        fieldType = typeName;
                        isRef = true;
                        break;
                    default:
                        fieldType = typeName + "?";
                        break;
                }
                ctx.WriteLine($"{GetAccess(GetAccess(field))} {typeName} {Escape(name)}").WriteLine("{").Indent();
                tw = ctx.Write(PropGetPrefix());
                tw.Write(fieldName);
                if (!string.IsNullOrWhiteSpace(defaultValue))
                {
                    tw.Write(" ?? ");
                    tw.Write(defaultValue);
                }
                else if (!isRef)
                {
                    tw.Write(".GetValueOrDefault()");
                }
                tw.Write(";");
                tw.WriteLine(PropSuffix());

                ctx.WriteLine($"{PropSetPrefix()}{fieldName} = value;{PropSuffix()}")
                    .Outdent().WriteLine("}");
                if (ctx.Supports(CSharp6))
                {
                    ctx.WriteLine($"{GetAccess(GetAccess(field))} bool ShouldSerialize{name}() => {fieldName} != null;")
                    .WriteLine($"{GetAccess(GetAccess(field))} void Reset{name}() => {fieldName} = null;");
                }
                else
                {
                    ctx.WriteLine($"{GetAccess(GetAccess(field))} bool ShouldSerialize{name}()").WriteLine("{").Indent()
                        .WriteLine($"return {fieldName} != null;").Outdent().WriteLine("}")
                        .WriteLine($"{GetAccess(GetAccess(field))} void Reset{name}()").WriteLine("{").Indent()
                        .WriteLine($"{fieldName} = null;").Outdent().WriteLine("}");
                }
                ctx.WriteLine($"private {fieldType} {fieldName};");
            }
            else
            {
                tw = ctx.Write($"{GetAccess(GetAccess(field))} {typeName} {Escape(name)} {{ get; set; }}");
                if (!string.IsNullOrWhiteSpace(defaultValue) && ctx.Supports(CSharp6)) tw.Write($" = {defaultValue};");
                tw.WriteLine();
            }

            string PropGetPrefix() => ctx.Supports(CSharp7) ? "get => " : "get { return ";
            string PropSetPrefix() => ctx.Supports(CSharp7) ? "set => " : "set { ";
            string PropSuffix() => ctx.Supports(CSharp7) ? "" : " }";
        }

        private static string GetOneOfFieldName(OneofDescriptorProto obj) => FieldPrefix + obj.Name;

        private static readonly Version // note: only mentioning features we use
            CSharp3 = new Version(3, 0), // partial methods
            CSharp4 = new Version(4, 0), // optional parameters
            CSharp6 = new Version(6, 0), // pragma prefixes, method expressions, property initializers
            CSharp7 = new Version(7, 0), // property expressions
            CSharp7_1 = new Version(7, 1), // default literals
            CSharp8 = new Version(8, 0), // ???
            CSharp9 = new Version(9, 0); // new()

        /// <summary>
        /// Starts an extensions block
        /// </summary>
        protected override void WriteExtensionsHeader(GeneratorContext ctx, FileDescriptorProto file, ref object state)
        {
            var name = file?.Options?.GetOptions()?.ExtensionTypeName;
            if (string.IsNullOrWhiteSpace(name)) name = "Extensions";
            ctx.WriteLine($"{GetAccess(GetAccess(file))} static partial class {Escape(name)}").WriteLine("{").Indent();
        }
        /// <summary>
        /// Ends an extgensions block
        /// </summary>
        protected override void WriteExtensionsFooter(GeneratorContext ctx, FileDescriptorProto file, ref object state)
        {
            ctx.Outdent().WriteLine("}");
        }
        /// <summary>
        /// Starts an extensions block
        /// </summary>
        protected override void WriteExtensionsHeader(GeneratorContext ctx, DescriptorProto message, ref object state)
        {
            var name = message?.Options?.GetOptions()?.ExtensionTypeName;
            if (string.IsNullOrWhiteSpace(name)) name = "Extensions";
            ctx.WriteLine($"{GetAccess(GetAccess(message))} static partial class {Escape(name)}").WriteLine("{").Indent();
        }
        /// <summary>
        /// Ends an extensions block
        /// </summary>
        protected override void WriteExtensionsFooter(GeneratorContext ctx, DescriptorProto message, ref object state)
        {
            ctx.Outdent().WriteLine("}");
        }
        /// <summary>
        /// Write an extension
        /// </summary>
        protected override void WriteExtension(GeneratorContext ctx, FieldDescriptorProto field)
        {
            var type = GetTypeName(ctx, field, out string dataFormat, out bool isMap, false);
            var nonNullableType = GetTypeName(ctx, field, out _, out _, true);
            var msg = ctx.TryFind<DescriptorProto>(field.Extendee);
            var extendee = MakeRelativeName(field, msg, ctx.NameNormalizer);

            var @this = field.Parent is FileDescriptorProto ? "this " : "";
            string name = ctx.NameNormalizer.GetName(field);
            TextWriter tw;

            if (isMap)
            {
                ctx.WriteLine("#error map extensions not yet implemented; please file an issue");
            }
            else
            {
                bool isRepeated = field.label == FieldDescriptorProto.Label.LabelRepeated;

                var getMethodName = isRepeated ? nameof(Extensible.GetValues) : nameof(Extensible.GetValue);
                if (isRepeated) ctx.WriteLine($"{GetAccess(GetAccess(field))} static {Qualify(typeof(IEnumerable<>), ctx)}<{nonNullableType}> Get{name}({@this}{extendee} obj)");
                else ctx.WriteLine($"{GetAccess(GetAccess(field))} static {type} Get{name}({@this}{extendee} obj)");
                if (ctx.Supports(CSharp6))
                {
                    tw = ctx.Indent().Write("=> ");
                }
                else
                {
                    ctx.WriteLine("{").Indent();
                    tw = ctx.Write("return ");
                }
                var defaultValue = isRepeated ? "null" : ctx.Supports(CSharp7_1) ? "default" : $"default({type})";
                tw.Write($"obj == null ? {defaultValue} : {Qualify<Extensible>(ctx)}.{getMethodName}<{(isRepeated ? nonNullableType : type)}>(obj, {field.Number}");
                if (!string.IsNullOrEmpty(dataFormat))
                {
                    tw.Write($", {Qualify<DataFormat>(ctx)}.{dataFormat}");
                }
                tw.WriteLine(");");
                if (ctx.Supports(CSharp6)) ctx.Outdent().WriteLine();
                else ctx.Outdent().WriteLine("}").WriteLine();

                var setAccessorName = isRepeated ? "Add" : "Set";
                ctx.WriteLine($"{GetAccess(GetAccess(field))} static void {setAccessorName}{name}({@this}{extendee} obj, {nonNullableType} value)");
                if (ctx.Supports(CSharp6))
                {
                    tw = ctx.Indent().Write("=> ");
                }
                else
                {
                    ctx.WriteLine("{").Indent();
                    tw = ctx.Write("");
                }
                tw.Write($"{Qualify<Extensible>(ctx)}.AppendValue<{nonNullableType}>(obj, {field.Number}");
                if (!string.IsNullOrEmpty(dataFormat))
                {
                    tw.Write($", {Qualify<DataFormat>(ctx)}.{dataFormat}");
                }
                tw.WriteLine(", value);");
                if (ctx.Supports(CSharp6)) ctx.Outdent().WriteLine();
                else ctx.Outdent().WriteLine("}").WriteLine();
            }
        }

        /// <summary>
        /// Emit the start of an enum declaration for 'oneof' groups, including the 0/None element
        /// </summary>
        protected override void WriteOneOfEnumHeader(GeneratorContext ctx, OneofDescriptorProto oneof, ref object state)
        {
            ctx.WriteLine().WriteLine($"public enum {ctx.NameNormalizer.GetName(oneof)}{OneOfEnumSuffixEnum}").WriteLine("{").Indent().WriteLine("None = 0,");
        }
        /// <summary>
        /// Emit the end of an enum declaration for 'oneof' groups
        /// </summary>
        protected override void WriteOneOfEnumFooter(GeneratorContext ctx, OneofDescriptorProto oneof, ref object state)
        {
            ctx.Outdent().WriteLine("}").WriteLine();
        }

        /// <summary>
        /// Emit a field-based entry for a 'oneof' groups's enum
        /// </summary>
        protected override void WriteOneOfEnumValue(GeneratorContext ctx, FieldDescriptorProto field, ref object state)
        {
            var name = ctx.NameNormalizer.GetName(field);
            ctx.WriteLine($"{Escape(name)} = {field.Number},");
        }
        /// <summary>
        /// Emit  the discriminator accessor for 'oneof' groups
        /// </summary>
        protected override void WriteOneOfDiscriminator(GeneratorContext ctx, OneofDescriptorProto oneof, ref object state)
        {
            var name = ctx.NameNormalizer.GetName(oneof);
            var fieldName = GetOneOfFieldName(oneof);
            if (ctx.Supports(CSharp6))
            {
                ctx.WriteLine($"public {name}{OneOfEnumSuffixEnum} {name}{OneOfEnumSuffixDiscriminator} => ({name}{OneOfEnumSuffixEnum}){fieldName}.Discriminator;");
            }
            else
            {
                ctx.WriteLine($"public {name}{OneOfEnumSuffixEnum} {name}{OneOfEnumSuffixDiscriminator}").WriteLine("{").Indent()
                    .WriteLine($"get {{ return ({name}{OneOfEnumSuffixEnum}){fieldName}.Discriminator; }}")
                    .Outdent().WriteLine("}");
            }
        }

        /// <summary>
        /// Indicate which types will commonly use arrays
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE0066:Convert switch statement to expression", Justification = "Readability")]
        protected virtual bool UseArray(FieldDescriptorProto field)
        {
            switch (field.type)
            {
                case FieldDescriptorProto.Type.TypeBool:
                case FieldDescriptorProto.Type.TypeDouble:
                case FieldDescriptorProto.Type.TypeFixed32:
                case FieldDescriptorProto.Type.TypeFixed64:
                case FieldDescriptorProto.Type.TypeFloat:
                case FieldDescriptorProto.Type.TypeInt32:
                case FieldDescriptorProto.Type.TypeInt64:
                case FieldDescriptorProto.Type.TypeSfixed32:
                case FieldDescriptorProto.Type.TypeSfixed64:
                case FieldDescriptorProto.Type.TypeSint32:
                case FieldDescriptorProto.Type.TypeSint64:
                case FieldDescriptorProto.Type.TypeUint32:
                case FieldDescriptorProto.Type.TypeUint64:
                    return true;
                default:
                    return false;
            }
        }

        /// <summary>
        /// Obtain a relative name from a type name
        /// </summary>
        protected string MakeRelativeName(GeneratorContext ctx, string typeName)
        {
            var target = ctx.TryFind<DescriptorProto>(typeName);
            if (target != null && target.Parent is IType type)
            {
                var name = FindNameFromCommonAncestor(type, target, ctx.NameNormalizer);
                if (!string.IsNullOrWhiteSpace(name))
                {
                    return name;
                }
            }

            return Escape(typeName);
        }

        private string GetTypeName(GeneratorContext ctx, string typeName)
        {
            string dataFormat = "";
            bool isMap = false;
            return GetTypeName(ctx, null, typeName, ref dataFormat, ref isMap, false);
        }

        private string GetTypeName(GeneratorContext ctx, FieldDescriptorProto field, string typeName, ref string dataFormat, ref bool isMap,
            bool nonNullable = false)
        {
            var nullable = nonNullable ? "" : "?";
            switch (typeName)
            {
                case WellKnownTypeTimestamp:
                    dataFormat = "WellKnown";
                    return Qualify<DateTime>(ctx) + nullable;
                case WellKnownTypeDuration:
                    dataFormat = "WellKnown";
                    return Qualify<TimeSpan>(ctx) + nullable;
                case WellKnownTypeEmpty:
                    return Qualify<WellKnownTypes.Empty>(ctx);
                case ".bcl.NetObjectProxy":
                    return "object";
                case ".bcl.DateTime":
                    return Qualify<DateTime>(ctx) + nullable;
                case ".bcl.TimeSpan":
                    return Qualify<TimeSpan>(ctx) + nullable;
                case ".bcl.Decimal":
                    return "decimal" + nullable;
                case ".bcl.Guid":
                    return Qualify<Guid>(ctx) + nullable;
            }
            var msgType = ctx.TryFind<DescriptorProto>(typeName);
            if (field != null && field.type == FieldDescriptorProto.Type.TypeGroup)
            {
                dataFormat = nameof(DataFormat.Group);
            }
            isMap = msgType?.Options?.MapEntry ?? false;
            return field == null ? MakeRelativeName(ctx, typeName) : MakeRelativeName(field, msgType, ctx.NameNormalizer);
        }

        private string GetTypeName(GeneratorContext ctx, FieldDescriptorProto field, out string dataFormat, out bool isMap,
            bool nonNullable = false)
        {
            dataFormat = "";
            isMap = false;
            switch (field.type)
            {
                case FieldDescriptorProto.Type.TypeDouble:
                    return "double";
                case FieldDescriptorProto.Type.TypeFloat:
                    return "float";
                case FieldDescriptorProto.Type.TypeBool:
                    return "bool";
                case FieldDescriptorProto.Type.TypeString:
                    return "string";
                case FieldDescriptorProto.Type.TypeSint32:
                    dataFormat = nameof(DataFormat.ZigZag);
                    return "int";
                case FieldDescriptorProto.Type.TypeInt32:
                    return "int";
                case FieldDescriptorProto.Type.TypeSfixed32:
                    dataFormat = nameof(DataFormat.FixedSize);
                    return "int";
                case FieldDescriptorProto.Type.TypeSint64:
                    dataFormat = nameof(DataFormat.ZigZag);
                    return "long";
                case FieldDescriptorProto.Type.TypeInt64:
                    return "long";
                case FieldDescriptorProto.Type.TypeSfixed64:
                    dataFormat = nameof(DataFormat.FixedSize);
                    return "long";
                case FieldDescriptorProto.Type.TypeFixed32:
                    dataFormat = nameof(DataFormat.FixedSize);
                    return "uint";
                case FieldDescriptorProto.Type.TypeUint32:
                    return "uint";
                case FieldDescriptorProto.Type.TypeFixed64:
                    dataFormat = nameof(DataFormat.FixedSize);
                    return "ulong";
                case FieldDescriptorProto.Type.TypeUint64:
                    return "ulong";
                case FieldDescriptorProto.Type.TypeBytes:
                    return "byte[]";
                case FieldDescriptorProto.Type.TypeEnum:
                    switch (field.TypeName)
                    {
                        case ".bcl.DateTime.DateTimeKind":
                            return Qualify<DateTimeKind>(ctx);
                    }
                    var enumType = ctx.TryFind<EnumDescriptorProto>(field.TypeName);
                    return MakeRelativeName(field, enumType, ctx.NameNormalizer);
                case FieldDescriptorProto.Type.TypeGroup:
                case FieldDescriptorProto.Type.TypeMessage:
                    return GetTypeName(ctx, field, field.TypeName, ref dataFormat, ref isMap, nonNullable);
                default:
                    return field.TypeName;
            }
        }

        private string MakeRelativeName(FieldDescriptorProto field, IType target, NameNormalizer normalizer)
        {
            if (target == null) return Escape(field.TypeName); // the only thing we know

            switch (target)
            {
                case DescriptorProto message:
                    var overrideNs = message.Options?.GetOptions()?.Namespace;
                    if (!string.IsNullOrWhiteSpace(overrideNs))
                        return "global::" + overrideNs + "." + Escape(normalizer.GetName(message));
                    break;
                case EnumDescriptorProto @enum:
                    overrideNs = @enum.Options?.GetOptions()?.Namespace;
                    if (!string.IsNullOrWhiteSpace(overrideNs))
                        return "global::" + overrideNs + "." + Escape(normalizer.GetName(@enum));
                    break;
            }

            var declaringType = field.Parent;

            if (declaringType is IType type)
            {
                var name = FindNameFromCommonAncestor(type, target, normalizer);
                if (!string.IsNullOrWhiteSpace(name)) return name;
            }
            return Escape(field.TypeName); // give up!
        }

        // k, what we do is; we have two types; each knows the parent, but nothing else, so:
        // for each, use a stack to build the ancestry tree - the "top" of the stack will be the
        // package, the bottom of the stack will be the type itself. They will often be stacks
        // of different heights.
        //
        // Find how many is in the smallest stack; now take that many items, in turn, until we
        // get something that is different (at which point, put that one back on the stack), or 
        // we run out of items in one of the stacks.
        //
        // There are now two options:
        // - we ran out of things in the "target" stack - in which case, they are common enough to not
        //   need any resolution - just give back the fixed name
        // - we have things left in the "target" stack - in which case we have found a common ancestor,
        //   or the target is a descendent; either way, just concat what is left (including the package
        //   if the package itself was different)

        private string FindNameFromCommonAncestor(IType declaring, IType target, NameNormalizer normalizer)
        {
            // trivial case; asking for self, or asking for immediate child
            if (ReferenceEquals(declaring, target) || ReferenceEquals(declaring, target.Parent))
            {
                if (target is DescriptorProto message) return Escape(normalizer.GetName(message));
                if (target is EnumDescriptorProto @enum) return Escape(normalizer.GetName(@enum));
                return null;
            }

            var origTarget = target;
            var xStack = new Stack<IType>();

            while (declaring != null)
            {
                xStack.Push(declaring);
                declaring = declaring.Parent;
            }
            var yStack = new Stack<IType>();

            while (target != null)
            {
                yStack.Push(target);
                target = target.Parent;
            }
            int lim = Math.Min(xStack.Count, yStack.Count);
            for (int i = 0; i < lim; i++)
            {
                declaring = xStack.Peek();
                target = yStack.Pop();
                if (!ReferenceEquals(target, declaring))
                {
                    // special-case: if both are the package (file), and they have the same namespace: we're OK
                    if (target is FileDescriptorProto targetFDP && declaring is FileDescriptorProto declaringFDP
                        && normalizer.GetName(declaringFDP) == normalizer.GetName(targetFDP))
                    {
                        // that's fine, keep going
                    }
                    else
                    {
                        // put it back
                        yStack.Push(target);
                        break;
                    }
                }
            }
            // if we used everything, then the target is an ancestor-or-self
            if (yStack.Count == 0)
            {
                target = origTarget;
                if (target is DescriptorProto message) return Escape(normalizer.GetName(message));
                if (target is EnumDescriptorProto @enum) return Escape(normalizer.GetName(@enum));
                return null;
            }

            var sb = new StringBuilder();
            while (yStack.Count != 0)
            {
                target = yStack.Pop();

                string nextName;
                if (target is FileDescriptorProto file) nextName = normalizer.GetName(file);
                else if (target is DescriptorProto message) nextName = normalizer.GetName(message);
                else if (target is EnumDescriptorProto @enum) nextName = normalizer.GetName(@enum);
                else return null;

                if (!string.IsNullOrWhiteSpace(nextName))
                {
                    if (sb.Length == 0 && target is FileDescriptorProto) sb.Append("global::");
                    else if (sb.Length != 0) sb.Append('.');
                    sb.Append(Escape(nextName));
                }
            }
            return sb.ToString();
        }

        private const string
            WellKnownTypeTimestamp = ".google.protobuf.Timestamp",
            WellKnownTypeDuration = ".google.protobuf.Duration",
            WellKnownTypeEmpty = ".google.protobuf.Empty";

        /// <summary>
        /// Emit code preceeding a set of service methods
        /// </summary>
        protected override void WriteServiceHeader(GeneratorContext ctx, ServiceDescriptorProto service, ref object state)
        {
            var name = ctx.NameNormalizer.GetName(service);
            if (ctx.EmitServicesFor(ServiceKinds.Grpc))
            {
                var tw = ctx.Write($"[{Qualify("ProtoBuf.Grpc.Configuration", "Service", ctx)}(@\"");
                tw.Write(service.FullyQualifiedName.TrimStart(ParserContext.Period));
                tw.WriteLine("\")]");
            }
            if (ctx.EmitServicesFor(ServiceKinds.Wcf))
            {
                var tw = ctx.Write($"[{Qualify("System.ServiceModel", "ServiceContract", ctx)}(Name = @\"");
                tw.Write(service.FullyQualifiedName.TrimStart(ParserContext.Period));
                tw.WriteLine("\")]");
            }
            WriteOptions(ctx, service.Options);
            ctx.WriteLine($"{GetAccess(GetAccess(service))} partial interface {Escape(name)}").WriteLine("{").Indent();
        }

        /// <summary>
        /// Emit code following a set of service methods
        /// </summary>
        protected override void WriteServiceFooter(GeneratorContext ctx, ServiceDescriptorProto service, ref object state)
        {
            ctx.Outdent().WriteLine("}").WriteLine();
        }

        /// <summary>
        /// Emit code representing a service method
        /// </summary>
        protected override void WriteServiceMethod(GeneratorContext ctx, MethodDescriptorProto method, ref object state)
        {
            var name = ctx.NameNormalizer.GetName(method);
            if (name != method.Name)
            {
                if (ctx.EmitServicesFor(ServiceKinds.Grpc))
                {
                    ctx.WriteLine($"[{Qualify("ProtoBuf.Grpc.Configuration", "Operation", ctx)}{NameIfDifferent(method, name)}]");
                }
                if (ctx.EmitServicesFor(ServiceKinds.Wcf))
                {
                    ctx.WriteLine($"[{Qualify("System.ServiceModel", "OperationContract", ctx)}{NameIfDifferent(method, name)}]");
                }
            }
            WriteOptions(ctx, method.Options);

            string returnType, inputType;
            if (method.ServerStreaming)
            {
                returnType = $"{Qualify("System.Collections.Generic", "IAsyncEnumerable", ctx)}<{GetTypeName(ctx, method.OutputType)}>";
            }
            else
            {
                string valueTask = Qualify("System.Threading.Tasks", "ValueTask", ctx);
                if (method.OutputType == WellKnownTypeEmpty)
                {
                    returnType = valueTask;
                }
                else
                {
                    returnType = $"{valueTask}<{GetTypeName(ctx, method.OutputType)}>";
                }
            }
            if (method.ClientStreaming)
            {
                inputType = $"{Qualify("System.Collections.Generic", "IAsyncEnumerable", ctx)}<{GetTypeName(ctx, method.InputType)}>";
            }
            else
            {
                if (method.InputType == WellKnownTypeEmpty)
                {
                    inputType = null;
                }
                else
                {
                    inputType = GetTypeName(ctx, method.InputType);
                }
            }

            var tw = ctx.Write($"{returnType} {Escape(name)}Async(");
            if (inputType != null)
            {
                tw.Write(inputType);
                tw.Write(method.ClientStreaming ? " values, " : " value, ");
            }
            string callContext = Qualify("ProtoBuf.Grpc", "CallContext", ctx);
            tw.Write($"{callContext} context");
            if (ctx.Supports(CSharp4))
            {
                tw.Write(" = default");
                if (!ctx.Supports(CSharp7_1))
                {
                    tw.Write($"({callContext})");
                }
            }
            tw.WriteLine(");");
        }
    }
}
