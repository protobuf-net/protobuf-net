syntax = "proto2";

import "protobuf-net/protogen.proto";
import "protobuf-net/bcl.proto";

option (.protobuf_net.fileopt).csharp_langver = "3";

// file comment

package AllTheThings;

enum RootEnum {
	A = 0;
	B = 1 [deprecated = true];
}
message TestNetObject {
  optional TestNetObject foo = 1 [(.protobuf_net.fieldopt).asRef = true];
  optional TestNetObject barRef = 2 [(.protobuf_net.fieldopt).asRef = true];
  optional bcl.NetObjectProxy barDyn = 3 [(.protobuf_net.fieldopt).dynamicType = true];
}

message MagicValues {
    optional float a = 1 [default=inf];
	optional float b = 2 [default=-inf];
	optional float c = 3 [default=nan];
	optional float d = 4 [default=0];
	optional float e = 5 [default=0.];
	optional float f = 6 [default=0.0];

	optional bool g = 7 [default=true];

	required int32 requiredWithDefault = 8 [default=12];
}

message SampleMessage {
  optional string foo_name = 1 [default="abc", json_name="none"];
  oneof test_oneof {
     //option deprecated = true;
     string name = 4 [default="abc"];
     bool sub_message = 9 [deprecated=true];
  }
  oneof another_one_of {
     //option deprecated = true;
     string name2 = 5 [default="abc"];
     bool sub_message2 = 10 [deprecated=true];
  }
  optional string bar_name = 12 [default="abc\\def\"ghi\'jkl\rmno\npqr\tstu"];
}

; // random semicolon
message SearchRequest {

  required string query = 1;
  optional int32 page_number = 2;
  optional int32 result_per_page = 3 [default = 10];
  enum Corpus {
    UNIVERSAL = 0;
    WEB = 1;
    IMAGES = 2;
    LOCAL = 3;
    NEWS = 4;
    PRODUCTS = 5;
    VIDEO = 6;
  }
  optional Corpus corpus = 4 [default = UNIVERSAL];
}
; // random semicolon

message SearchResponse {
  repeated Result result = 1;

  message Result {
    required string url = 1;
    optional string title = 2;
    repeated string snippets = 3;
  }

  repeated group Grouped = 10 {
	option deprecated = true;
    required string url = 2 [deprecated=true];
    optional string title = 3;
    repeated string snippets = 4;
  }
  // compiler INSISTS on first name being upper-case
  optional group UPPER  = 12 {
    required string url = 2;
    optional string title = 3;
    repeated string snippets = 4;
  }
}


service SearchService {
  option deprecated = true;
  rpc Search (stream SearchRequest) returns (SearchResponse);
  rpc OldMethod (SearchRequest) returns (stream SearchResponse)
  {
    option deprecated=true;
  }
}

message Outer {                  // Level 0
  map<sint32, string> map_field1 = 7 [deprecated=true];
  map<string, Outer> map_field2 = 8;
  message MiddleAA {  // Level 1
    message Inner {   // Level 2
      required int64 ival = 1;
      optional bool  booly = 2;
    }
  }
  message MiddleBB {  // Level 1
    message Inner {   // Level 2
      required int32 ival = 1;
      optional bool  booly = 2;
    }
  }
}

message SomeOtherMessage {
  optional string result = 1;
}

; // random semicolon
message FieldRules
{
	; // random semicolon
	required int32 required = 1;
	; // random semicolon
	optional int32 optional = 2; // field coment
	repeated int32 repeated = 3;
	repeated int32 packed = 4 [packed=true];
	; // random semicolon
}


enum EnumAllowingAlias {
  option allow_alias = true;
  EAA_UNKNOWN = 0;
  EAA_STARTED = 1;
  EAA_RUNNING = 1;
}
enum EnumNotAllowingAlias {
  ENAA_UNKNOWN = 0;
  ENAA_STARTED = 1;
  // RUNNING = 1;  // Uncommenting this line will cause a compile error inside Google and a warning message outside.
}

// not checked: enum conflicts should be at least a warning (so: Foo.A and Bar.A are illegal)

message TagRanges
{
	repeated string hi = 536870911;
	optional string lo = 1;
	// not yet checked: <= 0, > 536870911, 19000-19999, duplicates
}

message Foo {
  reserved 2, 15, 9 to 11;
  reserved "foo", "bar";
  // not yet checked: conflicting reservations with fields

  extensions 100 to 199;
}

extend Foo {
  optional int32 blap = 125;
}
message Baz {
  extend Foo {
    optional int32 bar = 126;
	optional Baz foo_ext = 127;
  }  
}

message PrimitiveFieldTypes {
	required double double = 1;
	required float float = 2;
	required int32 int32 = 3;
	required int64 int64 = 4;
	required uint32 uint32 = 5;
	required uint64 uint64 = 6;
	required sint32 sint32 = 7;
	required sint64 sint64 = 8;
	required fixed32 fixed32 = 9;
	required fixed64 fixed64 = 10;
	required sfixed32 sfixed32 = 11;
	required sfixed64 sfixed64 = 12;
	required bool bool = 13;
	required string string = 14;
	required bytes bytes = 15;
}

message RepeatedPrimitiveFieldTypes {
	repeated double double = 1;
	repeated float float = 2;
	repeated int32 int32 = 3;
	repeated int64 int64 = 4;
	repeated uint32 uint32 = 5;
	repeated uint64 uint64 = 6;
	repeated sint32 sint32 = 7;
	repeated sint64 sint64 = 8;
	repeated fixed32 fixed32 = 9;
	repeated fixed64 fixed64 = 10;
	repeated sfixed32 sfixed32 = 11;
	repeated sfixed64 sfixed64 = 12;
	repeated bool bool = 13;
	repeated string string = 14;
	repeated bytes bytes = 15;
}