<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>net462;netstandard2.0;netstandard2.1;net6.0</TargetFrameworks>
    <RootNamespace>ProtoBuf</RootNamespace>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <GeneratePackageOnBuild>True</GeneratePackageOnBuild>
    <AssemblyName>protobuf-net.Core</AssemblyName>
    <LangVersion>10</LangVersion>
    <Title>protobuf-net.Core</Title>
    <Description>Provides simple access to fast and efficient "Protocol Buffers" serialization from .NET applications</Description>
    <!--<DefineConstants>$(DefineConstants);TRACK_USAGE</DefineConstants>-->
  </PropertyGroup>

  <ItemGroup Condition="'$(TargetFramework)' == 'net462' or '$(TargetFramework)' == 'netstandard2.0'">
    <PackageReference Include="System.Memory" />
  </ItemGroup>

  <ItemGroup Condition="'$(TargetFramework)' != 'net7.0'">
    <!-- we use the AddRange span API from v7 -->
    <PackageReference Include="System.Collections.Immutable" />
  </ItemGroup>

  <PropertyGroup Condition="'$(TargetFramework)'=='netstandard2.1'">
    <DefineConstants>$(DefineConstants);PLAT_ISREF;PLAT_SPAN_OVERLOADS;PLAT_CONCURRENT_CLEAR</DefineConstants>
  </PropertyGroup>
  <PropertyGroup Condition="'$(TargetFramework)'=='net6.0'">
    <DefineConstants>$(DefineConstants);PLAT_ISREF;PLAT_SPAN_OVERLOADS;PLAT_INTRINSICS;PLAT_AGGRESSIVE_OPTIMIZE;PLAT_CONCURRENT_CLEAR;PLAT_SKIP_LOCALS_INIT;PLAT_UTF8_STRING;PLAT_DYNAMIC_ACCESS_ATTR</DefineConstants>
  </PropertyGroup>

<!--
PREFER_SPANS              : if the Stream resolves to something that can be processed another way, allow it
PLAT_ISREF                : does System.Runtime.CompilerServices.RuntimeHelpers.IsReferenceOrContainsReferences-T() exist?
PLAT_SPAN_OVERLOADS       : do common methods like string encode have APIs that take spans
PLAT_INTRINSICS           : make use of CPU intrinsics
PLAT_AGGRESSIVE_OPTIMIZE  : use MethodImplOptions.AggressiveOptimization appropriate
FEAT_DYNAMIC_REF          : whether the dynamic type / reference-tracking features are enabled
PLAT_CONCURRENT_CLEAR     : whether the concurrent collections have the necessary Clear method
PLAT_SKIP_LOCALS_INIT     : whether we can avoid ".locals init"
PLAT_DYNAMIC_ACCESS_ATTR  : whether the runtime defines DynamicallyAccessedMembersAttribute et al
TRACK_USAGE               : count writer activity to check disposal/re-use is correct
-->
</Project>
